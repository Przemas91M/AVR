
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000482  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000482  00000516  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  00800066  00800066  0000051c  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000011b  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006de  00000000  00000000  00000677  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002b0  00000000  00000000  00000d55  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000056a  00000000  00000000  00001005  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00001570  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001b0  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000099e  00000000  00000000  000017d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000216e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__vector_13>
  38:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e8       	ldi	r30, 0x82	; 130
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 38       	cpi	r26, 0x8B	; 139
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 3f 02 	jmp	0x47e	; 0x47e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#define F_CPU 16000000UL
#include <avr/interrupt.h>
#include <util/delay.h>
#include "uart.h"
int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
//***ustawienia***//
//pin PA0 jako wejscie
DDRA &= ~(1<<PA0)|(1<<PA1)|(1<<PA2)|(1<<PA3)|(1<<PA4)|(1<<PA5)|(1<<PA6)|(1<<PA7);
  96:	d0 98       	cbi	0x1a, 0	; 26
//podlaczenie rezystora pullup
PORTA |= (1<<PA0)|(1<<PA1)|(1<<PA2)|(1<<PA3)|(1<<PA4)|(1<<PA5)|(1<<PA6)|(1<<PA7);
  98:	8b b3       	in	r24, 0x1b	; 27
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	8b bb       	out	0x1b, r24	; 27
//inicjalizacja interfejsu uart 
//wyliczamy wartoœæ rejestru UBRR
uint16_t ubrr_cal=F_CPU/16/9600-1;
//konfiguracja baud
UBRRH = (uint8_t)(ubrr_cal>>8);
  9e:	10 bc       	out	0x20, r1	; 32
UBRRL = (uint8_t)ubrr_cal;
  a0:	87 e6       	ldi	r24, 0x67	; 103
  a2:	89 b9       	out	0x09, r24	; 9
//w³¹czenie UART
UCSRB = (1<<RXEN)|(1<<TXEN);
  a4:	88 e1       	ldi	r24, 0x18	; 24
  a6:	8a b9       	out	0x0a, r24	; 10
UCSRC = (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
  a8:	86 e8       	ldi	r24, 0x86	; 134
  aa:	80 bd       	out	0x20, r24	; 32
UCSRB |= (1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	88 69       	ori	r24, 0x98	; 152
  b0:	8a b9       	out	0x0a, r24	; 10
sei();
  b2:	78 94       	sei
uart_puts("siema");
  b4:	80 e6       	ldi	r24, 0x60	; 96
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 ef 00 	call	0x1de	; 0x1de <uart_puts>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  bc:	c0 e9       	ldi	r28, 0x90	; 144
  be:	d1 e0       	ldi	r29, 0x01	; 1
while(1)
	{
	if(!(PINA & (1<<PA0)))
  c0:	c8 99       	sbic	0x19, 0	; 25
  c2:	0b c0       	rjmp	.+22     	; 0xda <main+0x48>
	{
		uart_putc('1');
  c4:	81 e3       	ldi	r24, 0x31	; 49
  c6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <uart_putc>
  ca:	84 ef       	ldi	r24, 0xF4	; 244
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	fe 01       	movw	r30, r28
  d0:	31 97       	sbiw	r30, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x3e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d6:	d9 f7       	brne	.-10     	; 0xce <main+0x3c>
  d8:	f3 cf       	rjmp	.-26     	; 0xc0 <main+0x2e>
		_delay_ms(50);
	}
	else if(!(PINA & (1<<PA1)))
  da:	c9 99       	sbic	0x19, 1	; 25
  dc:	0b c0       	rjmp	.+22     	; 0xf4 <main+0x62>
	{
		uart_putc('2');
  de:	82 e3       	ldi	r24, 0x32	; 50
  e0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <uart_putc>
  e4:	84 ef       	ldi	r24, 0xF4	; 244
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	fe 01       	movw	r30, r28
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <main+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ee:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f0:	d9 f7       	brne	.-10     	; 0xe8 <main+0x56>
  f2:	e6 cf       	rjmp	.-52     	; 0xc0 <main+0x2e>
		_delay_ms(50);	
	}
	else if(!(PINA & (1<<PA2)))
  f4:	ca 99       	sbic	0x19, 2	; 25
  f6:	0b c0       	rjmp	.+22     	; 0x10e <main+0x7c>
	{
		uart_putc('3');
  f8:	83 e3       	ldi	r24, 0x33	; 51
  fa:	0e 94 dd 00 	call	0x1ba	; 0x1ba <uart_putc>
  fe:	84 ef       	ldi	r24, 0xF4	; 244
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	fe 01       	movw	r30, r28
 104:	31 97       	sbiw	r30, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <main+0x72>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 108:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 10a:	d9 f7       	brne	.-10     	; 0x102 <main+0x70>
 10c:	d9 cf       	rjmp	.-78     	; 0xc0 <main+0x2e>
		_delay_ms(50);	
	}
	else if(!(PINA & (1<<PA3)))
 10e:	cb 99       	sbic	0x19, 3	; 25
 110:	0b c0       	rjmp	.+22     	; 0x128 <main+0x96>
	{
		uart_putc('4');
 112:	84 e3       	ldi	r24, 0x34	; 52
 114:	0e 94 dd 00 	call	0x1ba	; 0x1ba <uart_putc>
 118:	84 ef       	ldi	r24, 0xF4	; 244
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	fe 01       	movw	r30, r28
 11e:	31 97       	sbiw	r30, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <main+0x8c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 122:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 124:	d9 f7       	brne	.-10     	; 0x11c <main+0x8a>
 126:	cc cf       	rjmp	.-104    	; 0xc0 <main+0x2e>
		_delay_ms(50);	
	}
	else if(!(PINA & (1<<PA4)))
 128:	cc 99       	sbic	0x19, 4	; 25
 12a:	0b c0       	rjmp	.+22     	; 0x142 <main+0xb0>
	{
		uart_putc('5');
 12c:	85 e3       	ldi	r24, 0x35	; 53
 12e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <uart_putc>
 132:	84 ef       	ldi	r24, 0xF4	; 244
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	fe 01       	movw	r30, r28
 138:	31 97       	sbiw	r30, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <main+0xa6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 13c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 13e:	d9 f7       	brne	.-10     	; 0x136 <main+0xa4>
 140:	bf cf       	rjmp	.-130    	; 0xc0 <main+0x2e>
		_delay_ms(50);	
	}
	else if(!(PINA & (1<<PA5)))
 142:	cd 99       	sbic	0x19, 5	; 25
 144:	0b c0       	rjmp	.+22     	; 0x15c <main+0xca>
	{
		uart_putc('6');
 146:	86 e3       	ldi	r24, 0x36	; 54
 148:	0e 94 dd 00 	call	0x1ba	; 0x1ba <uart_putc>
 14c:	84 ef       	ldi	r24, 0xF4	; 244
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	fe 01       	movw	r30, r28
 152:	31 97       	sbiw	r30, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <main+0xc0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 156:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 158:	d9 f7       	brne	.-10     	; 0x150 <main+0xbe>
 15a:	b2 cf       	rjmp	.-156    	; 0xc0 <main+0x2e>
		_delay_ms(50);	
	}
	else if(!(PINA & (1<<PA6)))
 15c:	ce 99       	sbic	0x19, 6	; 25
 15e:	0b c0       	rjmp	.+22     	; 0x176 <main+0xe4>
	{
		uart_putc('7');
 160:	87 e3       	ldi	r24, 0x37	; 55
 162:	0e 94 dd 00 	call	0x1ba	; 0x1ba <uart_putc>
 166:	84 ef       	ldi	r24, 0xF4	; 244
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	fe 01       	movw	r30, r28
 16c:	31 97       	sbiw	r30, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <main+0xda>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 170:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 172:	d9 f7       	brne	.-10     	; 0x16a <main+0xd8>
 174:	a5 cf       	rjmp	.-182    	; 0xc0 <main+0x2e>
		_delay_ms(50);	
	}
	else if(!(PINA & (1<<PA7)))
 176:	cf 99       	sbic	0x19, 7	; 25
 178:	a3 cf       	rjmp	.-186    	; 0xc0 <main+0x2e>
	{
		uart_putc('8');
 17a:	88 e3       	ldi	r24, 0x38	; 56
 17c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <uart_putc>
 180:	84 ef       	ldi	r24, 0xF4	; 244
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	fe 01       	movw	r30, r28
 186:	31 97       	sbiw	r30, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <main+0xf4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 18a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 18c:	d9 f7       	brne	.-10     	; 0x184 <main+0xf2>
 18e:	98 cf       	rjmp	.-208    	; 0xc0 <main+0x2e>

00000190 <uart_init>:

volatile uint8_t rx_overrun=0;

void uart_init(uint16_t baud){
	//wyliczamy wartoœæ rejestru UBRR
	uint16_t ubrr_cal=F_CPU/16/baud-1;
 190:	9c 01       	movw	r18, r24
 192:	40 e0       	ldi	r20, 0x00	; 0
 194:	50 e0       	ldi	r21, 0x00	; 0
 196:	60 e4       	ldi	r22, 0x40	; 64
 198:	72 e4       	ldi	r23, 0x42	; 66
 19a:	8f e0       	ldi	r24, 0x0F	; 15
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 09 02 	call	0x412	; 0x412 <__udivmodsi4>
 1a2:	21 50       	subi	r18, 0x01	; 1
 1a4:	30 40       	sbci	r19, 0x00	; 0
	//konfiguracja baud
	UBRRH = (uint8_t)(ubrr_cal>>8);
 1a6:	30 bd       	out	0x20, r19	; 32
	UBRRL = (uint8_t)ubrr_cal;
 1a8:	29 b9       	out	0x09, r18	; 9
	//w³¹czenie UART
	UCSRB = (1<<RXEN)|(1<<TXEN);
 1aa:	88 e1       	ldi	r24, 0x18	; 24
 1ac:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
 1ae:	86 e8       	ldi	r24, 0x86	; 134
 1b0:	80 bd       	out	0x20, r24	; 32
	UCSRB |= (1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
 1b2:	8a b1       	in	r24, 0x0a	; 10
 1b4:	88 69       	ori	r24, 0x98	; 152
 1b6:	8a b9       	out	0x0a, r24	; 10
}
 1b8:	08 95       	ret

000001ba <uart_putc>:

void uart_putc(char data){
 1ba:	28 2f       	mov	r18, r24
	uint8_t new_h=(uart_tx_h+1)&UART_BUFFER_MASK;
 1bc:	90 91 68 00 	lds	r25, 0x0068
 1c0:	9f 5f       	subi	r25, 0xFF	; 255
 1c2:	9f 70       	andi	r25, 0x0F	; 15
	while(new_h==uart_tx_t);
 1c4:	80 91 69 00 	lds	r24, 0x0069
 1c8:	98 17       	cp	r25, r24
 1ca:	e1 f3       	breq	.-8      	; 0x1c4 <uart_putc+0xa>
	UART_TX_BUF[new_h]=data;
 1cc:	e9 2f       	mov	r30, r25
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	e5 59       	subi	r30, 0x95	; 149
 1d2:	ff 4f       	sbci	r31, 0xFF	; 255
 1d4:	20 83       	st	Z, r18
	uart_tx_h=new_h;
 1d6:	90 93 68 00 	sts	0x0068, r25
	UCSRB |= (1<<UDRIE);
 1da:	55 9a       	sbi	0x0a, 5	; 10
}
 1dc:	08 95       	ret

000001de <uart_puts>:

void uart_puts(char *string){
 1de:	dc 01       	movw	r26, r24
 1e0:	10 c0       	rjmp	.+32     	; 0x202 <uart_puts+0x24>
	UCSRC = (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
	UCSRB |= (1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
}

void uart_putc(char data){
	uint8_t new_h=(uart_tx_h+1)&UART_BUFFER_MASK;
 1e2:	90 91 68 00 	lds	r25, 0x0068
 1e6:	9f 5f       	subi	r25, 0xFF	; 255
 1e8:	9f 70       	andi	r25, 0x0F	; 15
	while(new_h==uart_tx_t);
 1ea:	80 91 69 00 	lds	r24, 0x0069
 1ee:	98 17       	cp	r25, r24
 1f0:	e1 f3       	breq	.-8      	; 0x1ea <uart_puts+0xc>
	UART_TX_BUF[new_h]=data;
 1f2:	e9 2f       	mov	r30, r25
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	e5 59       	subi	r30, 0x95	; 149
 1f8:	ff 4f       	sbci	r31, 0xFF	; 255
 1fa:	20 83       	st	Z, r18
	uart_tx_h=new_h;
 1fc:	90 93 68 00 	sts	0x0068, r25
	UCSRB |= (1<<UDRIE);
 200:	55 9a       	sbi	0x0a, 5	; 10
}

void uart_puts(char *string){
	char c;
	while((c=*string++))uart_putc(c);
 202:	2d 91       	ld	r18, X+
 204:	22 23       	and	r18, r18
 206:	69 f7       	brne	.-38     	; 0x1e2 <uart_puts+0x4>
}
 208:	08 95       	ret

0000020a <uart_getc>:
	itoa(number,buffer,base);
	uart_puts(buffer);
}

char uart_getc(void){
	if(uart_rx_t==uart_rx_h)return 0;
 20a:	90 91 67 00 	lds	r25, 0x0067
 20e:	80 91 66 00 	lds	r24, 0x0066
 212:	98 17       	cp	r25, r24
 214:	11 f4       	brne	.+4      	; 0x21a <uart_getc+0x10>
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	08 95       	ret
	uart_rx_t=(uart_rx_t+1)&UART_BUFFER_MASK;
 21a:	80 91 67 00 	lds	r24, 0x0067
 21e:	8f 5f       	subi	r24, 0xFF	; 255
 220:	8f 70       	andi	r24, 0x0F	; 15
 222:	80 93 67 00 	sts	0x0067, r24
	return UART_RX_BUF[uart_rx_t];
 226:	e0 91 67 00 	lds	r30, 0x0067
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	e5 58       	subi	r30, 0x85	; 133
 22e:	ff 4f       	sbci	r31, 0xFF	; 255
 230:	80 81       	ld	r24, Z
}
 232:	08 95       	ret

00000234 <uart_getint>:

uint16_t uart_getint(void){
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	30 e0       	ldi	r19, 0x00	; 0
	itoa(number,buffer,base);
	uart_puts(buffer);
}

char uart_getc(void){
	if(uart_rx_t==uart_rx_h)return 0;
 238:	90 91 67 00 	lds	r25, 0x0067
 23c:	80 91 66 00 	lds	r24, 0x0066
 240:	98 17       	cp	r25, r24
 242:	d1 f3       	breq	.-12     	; 0x238 <uart_getint+0x4>
	uart_rx_t=(uart_rx_t+1)&UART_BUFFER_MASK;
 244:	80 91 67 00 	lds	r24, 0x0067
 248:	8f 5f       	subi	r24, 0xFF	; 255
 24a:	8f 70       	andi	r24, 0x0F	; 15
 24c:	80 93 67 00 	sts	0x0067, r24
	return UART_RX_BUF[uart_rx_t];
 250:	e0 91 67 00 	lds	r30, 0x0067
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	e5 58       	subi	r30, 0x85	; 133
 258:	ff 4f       	sbci	r31, 0xFF	; 255
 25a:	40 81       	ld	r20, Z
uint16_t uart_getint(void){
  char odebrany=0;
  uint16_t liczba=0;
  do{
  	odebrany=uart_getc();
    if(odebrany!=0){
 25c:	44 23       	and	r20, r20
 25e:	61 f3       	breq	.-40     	; 0x238 <uart_getint+0x4>
      if(odebrany!='\r'){//filtrujemy znak zakoñczenia liczby
 260:	4d 30       	cpi	r20, 0x0D	; 13
 262:	09 f1       	breq	.+66     	; 0x2a6 <uart_getint+0x72>
	UCSRC = (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
	UCSRB |= (1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
}

void uart_putc(char data){
	uint8_t new_h=(uart_tx_h+1)&UART_BUFFER_MASK;
 264:	90 91 68 00 	lds	r25, 0x0068
 268:	9f 5f       	subi	r25, 0xFF	; 255
 26a:	9f 70       	andi	r25, 0x0F	; 15
	while(new_h==uart_tx_t);
 26c:	80 91 69 00 	lds	r24, 0x0069
 270:	98 17       	cp	r25, r24
 272:	e1 f3       	breq	.-8      	; 0x26c <uart_getint+0x38>
	UART_TX_BUF[new_h]=data;
 274:	e9 2f       	mov	r30, r25
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	e5 59       	subi	r30, 0x95	; 149
 27a:	ff 4f       	sbci	r31, 0xFF	; 255
 27c:	40 83       	st	Z, r20
	uart_tx_h=new_h;
 27e:	90 93 68 00 	sts	0x0068, r25
	UCSRB |= (1<<UDRIE);
 282:	55 9a       	sbi	0x0a, 5	; 10
  do{
  	odebrany=uart_getc();
    if(odebrany!=0){
      if(odebrany!='\r'){//filtrujemy znak zakoñczenia liczby
	  	uart_putc(odebrany);
        liczba*=10;
 284:	c9 01       	movw	r24, r18
 286:	63 e0       	ldi	r22, 0x03	; 3
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	6a 95       	dec	r22
 28e:	e1 f7       	brne	.-8      	; 0x288 <uart_getint+0x54>
 290:	22 0f       	add	r18, r18
 292:	33 1f       	adc	r19, r19
 294:	82 0f       	add	r24, r18
 296:	93 1f       	adc	r25, r19
        liczba+=odebrany-'0';
 298:	24 2f       	mov	r18, r20
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	20 53       	subi	r18, 0x30	; 48
 29e:	30 40       	sbci	r19, 0x00	; 0
 2a0:	28 0f       	add	r18, r24
 2a2:	39 1f       	adc	r19, r25
 2a4:	c9 cf       	rjmp	.-110    	; 0x238 <uart_getint+0x4>
      }
    }
  }while(odebrany!='\r');//jeœli odebraliœmy znak zakoñczenia liczby to wychodzimy z pêtli  
  return liczba;//zwracamy odebran¹ liczbê
}
 2a6:	c9 01       	movw	r24, r18
 2a8:	08 95       	ret

000002aa <__vector_13>:

ISR(USART_RXC_vect){
 2aa:	1f 92       	push	r1
 2ac:	0f 92       	push	r0
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	0f 92       	push	r0
 2b2:	11 24       	eor	r1, r1
 2b4:	8f 93       	push	r24
 2b6:	9f 93       	push	r25
 2b8:	ef 93       	push	r30
 2ba:	ff 93       	push	r31
	uint8_t new_h=(uart_rx_h+1)&UART_BUFFER_MASK;
 2bc:	90 91 66 00 	lds	r25, 0x0066
 2c0:	9f 5f       	subi	r25, 0xFF	; 255
 2c2:	9f 70       	andi	r25, 0x0F	; 15

	if(new_h!=uart_rx_t){
 2c4:	80 91 67 00 	lds	r24, 0x0067
 2c8:	98 17       	cp	r25, r24
 2ca:	51 f0       	breq	.+20     	; 0x2e0 <__vector_13+0x36>
		uart_rx_h=new_h;
 2cc:	90 93 66 00 	sts	0x0066, r25
		UART_RX_BUF[uart_rx_h]=UDR;
 2d0:	e0 91 66 00 	lds	r30, 0x0066
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	8c b1       	in	r24, 0x0c	; 12
 2d8:	e5 58       	subi	r30, 0x85	; 133
 2da:	ff 4f       	sbci	r31, 0xFF	; 255
 2dc:	80 83       	st	Z, r24
 2de:	04 c0       	rjmp	.+8      	; 0x2e8 <__vector_13+0x3e>
	}else{
		rx_overrun=1;
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	80 93 6a 00 	sts	0x006A, r24
		new_h=UDR;//odczytujemy bufor, ¿eby nie zawiesiæ systemu
 2e6:	8c b1       	in	r24, 0x0c	; 12
	}
}
 2e8:	ff 91       	pop	r31
 2ea:	ef 91       	pop	r30
 2ec:	9f 91       	pop	r25
 2ee:	8f 91       	pop	r24
 2f0:	0f 90       	pop	r0
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	0f 90       	pop	r0
 2f6:	1f 90       	pop	r1
 2f8:	18 95       	reti

000002fa <__vector_14>:

ISR(USART_UDRE_vect){
 2fa:	1f 92       	push	r1
 2fc:	0f 92       	push	r0
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	0f 92       	push	r0
 302:	11 24       	eor	r1, r1
 304:	8f 93       	push	r24
 306:	9f 93       	push	r25
 308:	ef 93       	push	r30
 30a:	ff 93       	push	r31
	if(uart_tx_t!=uart_tx_h){
 30c:	90 91 69 00 	lds	r25, 0x0069
 310:	80 91 68 00 	lds	r24, 0x0068
 314:	98 17       	cp	r25, r24
 316:	71 f0       	breq	.+28     	; 0x334 <__vector_14+0x3a>
		uart_tx_t=(uart_tx_t+1)&UART_BUFFER_MASK;
 318:	80 91 69 00 	lds	r24, 0x0069
 31c:	8f 5f       	subi	r24, 0xFF	; 255
 31e:	8f 70       	andi	r24, 0x0F	; 15
 320:	80 93 69 00 	sts	0x0069, r24
		UDR=UART_TX_BUF[uart_tx_t];
 324:	e0 91 69 00 	lds	r30, 0x0069
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	e5 59       	subi	r30, 0x95	; 149
 32c:	ff 4f       	sbci	r31, 0xFF	; 255
 32e:	80 81       	ld	r24, Z
 330:	8c b9       	out	0x0c, r24	; 12
 332:	01 c0       	rjmp	.+2      	; 0x336 <__vector_14+0x3c>
	}else{
		UCSRB &= ~(1<<UDRIE);
 334:	55 98       	cbi	0x0a, 5	; 10
	}
}
 336:	ff 91       	pop	r31
 338:	ef 91       	pop	r30
 33a:	9f 91       	pop	r25
 33c:	8f 91       	pop	r24
 33e:	0f 90       	pop	r0
 340:	0f be       	out	0x3f, r0	; 63
 342:	0f 90       	pop	r0
 344:	1f 90       	pop	r1
 346:	18 95       	reti

00000348 <uart_putint>:
void uart_puts(char *string){
	char c;
	while((c=*string++))uart_putc(c);
}

void uart_putint(int number, uint8_t base){
 348:	0f 93       	push	r16
 34a:	1f 93       	push	r17
 34c:	df 93       	push	r29
 34e:	cf 93       	push	r28
 350:	cd b7       	in	r28, 0x3d	; 61
 352:	de b7       	in	r29, 0x3e	; 62
 354:	64 97       	sbiw	r28, 0x14	; 20
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	f8 94       	cli
 35a:	de bf       	out	0x3e, r29	; 62
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	cd bf       	out	0x3d, r28	; 61
 360:	46 2f       	mov	r20, r22
	char buffer[20];
	itoa(number,buffer,base);
 362:	8e 01       	movw	r16, r28
 364:	0f 5f       	subi	r16, 0xFF	; 255
 366:	1f 4f       	sbci	r17, 0xFF	; 255
 368:	b8 01       	movw	r22, r16
 36a:	50 e0       	ldi	r21, 0x00	; 0
 36c:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <itoa>
 370:	d8 01       	movw	r26, r16
 372:	10 c0       	rjmp	.+32     	; 0x394 <uart_putint+0x4c>
	UCSRC = (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
	UCSRB |= (1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
}

void uart_putc(char data){
	uint8_t new_h=(uart_tx_h+1)&UART_BUFFER_MASK;
 374:	90 91 68 00 	lds	r25, 0x0068
 378:	9f 5f       	subi	r25, 0xFF	; 255
 37a:	9f 70       	andi	r25, 0x0F	; 15
	while(new_h==uart_tx_t);
 37c:	80 91 69 00 	lds	r24, 0x0069
 380:	98 17       	cp	r25, r24
 382:	e1 f3       	breq	.-8      	; 0x37c <uart_putint+0x34>
	UART_TX_BUF[new_h]=data;
 384:	e9 2f       	mov	r30, r25
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	e5 59       	subi	r30, 0x95	; 149
 38a:	ff 4f       	sbci	r31, 0xFF	; 255
 38c:	20 83       	st	Z, r18
	uart_tx_h=new_h;
 38e:	90 93 68 00 	sts	0x0068, r25
	UCSRB |= (1<<UDRIE);
 392:	55 9a       	sbi	0x0a, 5	; 10
}

void uart_puts(char *string){
	char c;
	while((c=*string++))uart_putc(c);
 394:	2d 91       	ld	r18, X+
 396:	22 23       	and	r18, r18
 398:	69 f7       	brne	.-38     	; 0x374 <uart_putint+0x2c>

void uart_putint(int number, uint8_t base){
	char buffer[20];
	itoa(number,buffer,base);
	uart_puts(buffer);
}
 39a:	64 96       	adiw	r28, 0x14	; 20
 39c:	0f b6       	in	r0, 0x3f	; 63
 39e:	f8 94       	cli
 3a0:	de bf       	out	0x3e, r29	; 62
 3a2:	0f be       	out	0x3f, r0	; 63
 3a4:	cd bf       	out	0x3d, r28	; 61
 3a6:	cf 91       	pop	r28
 3a8:	df 91       	pop	r29
 3aa:	1f 91       	pop	r17
 3ac:	0f 91       	pop	r16
 3ae:	08 95       	ret

000003b0 <itoa>:
 3b0:	fb 01       	movw	r30, r22
 3b2:	9f 01       	movw	r18, r30
 3b4:	e8 94       	clt
 3b6:	42 30       	cpi	r20, 0x02	; 2
 3b8:	c4 f0       	brlt	.+48     	; 0x3ea <itoa+0x3a>
 3ba:	45 32       	cpi	r20, 0x25	; 37
 3bc:	b4 f4       	brge	.+44     	; 0x3ea <itoa+0x3a>
 3be:	4a 30       	cpi	r20, 0x0A	; 10
 3c0:	29 f4       	brne	.+10     	; 0x3cc <itoa+0x1c>
 3c2:	97 fb       	bst	r25, 7
 3c4:	1e f4       	brtc	.+6      	; 0x3cc <itoa+0x1c>
 3c6:	90 95       	com	r25
 3c8:	81 95       	neg	r24
 3ca:	9f 4f       	sbci	r25, 0xFF	; 255
 3cc:	64 2f       	mov	r22, r20
 3ce:	77 27       	eor	r23, r23
 3d0:	0e 94 2b 02 	call	0x456	; 0x456 <__udivmodhi4>
 3d4:	80 5d       	subi	r24, 0xD0	; 208
 3d6:	8a 33       	cpi	r24, 0x3A	; 58
 3d8:	0c f0       	brlt	.+2      	; 0x3dc <itoa+0x2c>
 3da:	89 5d       	subi	r24, 0xD9	; 217
 3dc:	81 93       	st	Z+, r24
 3de:	cb 01       	movw	r24, r22
 3e0:	00 97       	sbiw	r24, 0x00	; 0
 3e2:	a1 f7       	brne	.-24     	; 0x3cc <itoa+0x1c>
 3e4:	16 f4       	brtc	.+4      	; 0x3ea <itoa+0x3a>
 3e6:	5d e2       	ldi	r21, 0x2D	; 45
 3e8:	51 93       	st	Z+, r21
 3ea:	10 82       	st	Z, r1
 3ec:	c9 01       	movw	r24, r18
 3ee:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <strrev>

000003f2 <strrev>:
 3f2:	dc 01       	movw	r26, r24
 3f4:	fc 01       	movw	r30, r24
 3f6:	67 2f       	mov	r22, r23
 3f8:	71 91       	ld	r23, Z+
 3fa:	77 23       	and	r23, r23
 3fc:	e1 f7       	brne	.-8      	; 0x3f6 <strrev+0x4>
 3fe:	32 97       	sbiw	r30, 0x02	; 2
 400:	04 c0       	rjmp	.+8      	; 0x40a <strrev+0x18>
 402:	7c 91       	ld	r23, X
 404:	6d 93       	st	X+, r22
 406:	70 83       	st	Z, r23
 408:	62 91       	ld	r22, -Z
 40a:	ae 17       	cp	r26, r30
 40c:	bf 07       	cpc	r27, r31
 40e:	c8 f3       	brcs	.-14     	; 0x402 <strrev+0x10>
 410:	08 95       	ret

00000412 <__udivmodsi4>:
 412:	a1 e2       	ldi	r26, 0x21	; 33
 414:	1a 2e       	mov	r1, r26
 416:	aa 1b       	sub	r26, r26
 418:	bb 1b       	sub	r27, r27
 41a:	fd 01       	movw	r30, r26
 41c:	0d c0       	rjmp	.+26     	; 0x438 <__udivmodsi4_ep>

0000041e <__udivmodsi4_loop>:
 41e:	aa 1f       	adc	r26, r26
 420:	bb 1f       	adc	r27, r27
 422:	ee 1f       	adc	r30, r30
 424:	ff 1f       	adc	r31, r31
 426:	a2 17       	cp	r26, r18
 428:	b3 07       	cpc	r27, r19
 42a:	e4 07       	cpc	r30, r20
 42c:	f5 07       	cpc	r31, r21
 42e:	20 f0       	brcs	.+8      	; 0x438 <__udivmodsi4_ep>
 430:	a2 1b       	sub	r26, r18
 432:	b3 0b       	sbc	r27, r19
 434:	e4 0b       	sbc	r30, r20
 436:	f5 0b       	sbc	r31, r21

00000438 <__udivmodsi4_ep>:
 438:	66 1f       	adc	r22, r22
 43a:	77 1f       	adc	r23, r23
 43c:	88 1f       	adc	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	1a 94       	dec	r1
 442:	69 f7       	brne	.-38     	; 0x41e <__udivmodsi4_loop>
 444:	60 95       	com	r22
 446:	70 95       	com	r23
 448:	80 95       	com	r24
 44a:	90 95       	com	r25
 44c:	9b 01       	movw	r18, r22
 44e:	ac 01       	movw	r20, r24
 450:	bd 01       	movw	r22, r26
 452:	cf 01       	movw	r24, r30
 454:	08 95       	ret

00000456 <__udivmodhi4>:
 456:	aa 1b       	sub	r26, r26
 458:	bb 1b       	sub	r27, r27
 45a:	51 e1       	ldi	r21, 0x11	; 17
 45c:	07 c0       	rjmp	.+14     	; 0x46c <__udivmodhi4_ep>

0000045e <__udivmodhi4_loop>:
 45e:	aa 1f       	adc	r26, r26
 460:	bb 1f       	adc	r27, r27
 462:	a6 17       	cp	r26, r22
 464:	b7 07       	cpc	r27, r23
 466:	10 f0       	brcs	.+4      	; 0x46c <__udivmodhi4_ep>
 468:	a6 1b       	sub	r26, r22
 46a:	b7 0b       	sbc	r27, r23

0000046c <__udivmodhi4_ep>:
 46c:	88 1f       	adc	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	5a 95       	dec	r21
 472:	a9 f7       	brne	.-22     	; 0x45e <__udivmodhi4_loop>
 474:	80 95       	com	r24
 476:	90 95       	com	r25
 478:	bc 01       	movw	r22, r24
 47a:	cd 01       	movw	r24, r26
 47c:	08 95       	ret

0000047e <_exit>:
 47e:	f8 94       	cli

00000480 <__stop_program>:
 480:	ff cf       	rjmp	.-2      	; 0x480 <__stop_program>
